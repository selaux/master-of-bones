import numpy as np
from skimage.color import label2rgb
from skimage.transform import resize

def image(plt, image):
    fig, ax = plt.subplots(1)
    ax.imshow(image)
    ax.set_title("Image")

def clusters(plt, image, clusters):
    fig, ax = plt.subplots(1, 2)
    ax[0].imshow(image)
    ax[0].set_title("RGB")
    ax[1].imshow(resize(label2rgb(clusters), image.shape))
    ax[1].set_title("Clusters")

def feature(plt, image, f, index=0):
    reshaped = f.reshape((image.shape[0], image.shape[1]))
    fig, ax = plt.subplots(1)
    ax.imshow(reshaped)
    ax.set_title("Feature {0}".format(index))

def features(plt, image, features):
    number_of_features = features.shape[1] if len(features.shape) > 1 else 1

    if number_of_features != 1:
        for i in range(features.shape[1]):
            feature(plt, image, features[:, i], i)
    else:
        feature(plt, image, features)
        
def triangulation(plt, image, bone_pixels, recalc):
	tri = recalc(bone_pixels)
	fig = plt.figure()
	
	ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
	ax.set_ylim(image.shape[0], 0)
	ax.set_xlim(0, image.shape[1])
	
	ax.imshow(image)
	triangulation_lines = ax.triplot(tri.points[:, 1], tri.points[:, 0], tri.simplices.copy(), 'r-')
	
	def on_click(event):
		if event.inaxes:
            ax = event.inaxes
			x = int(event.xdata)
			y = int(event.ydata)
			bone_pixels[y, x] = 255
			tri = recalc(bone_pixels)
			
			print(ax.lines)
			for t in ax.lines:
				try:
					t.remove()
				except:
					pass
			ax.triplot(tri.points[:, 1], tri.points[:, 0], tri.simplices.copy(), 'r-')
			fig.canvas.draw()
			print('Drawn')
		
	fig.canvas.mpl_connect('button_press_event', on_click)
		
